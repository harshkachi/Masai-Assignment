

Deadlock is a situation where two or more threads communicate with each other are blocked forever, 
waiting for each other. Here's an example.


example:

class A {
	public synchronized void funA(B b1){
		System.out.println("funA of A starts");
		b1.fun2();
		System.out.println("funA of A ends");
	}
	public synchronized void fun1(){
		System.out.println("inside fun1 of A");
	}
}


class B {
	public synchronized void funB(A a1){
		System.out.println("funB of B starts");
		a1.fun1();
		System.out.println("funB of B ends");
	}
	
	public synchronized void fun2(){
		System.out.println("inside fun2 of B");
	}
}


class ThreadA extends Thread{
	A a1;
	B b1;
	public ThreadA(A a1,B b1) {
	this.b1=b1;
	this.a1=a1;
}

class ThreadB extends Thread{
	A a1;
	B b1;
	
public ThreadB(A a1,B b1) {
	this.b1=b1;
	this.a1=a1;
}

@Override
	public void run() {
	b1.funB(a1);
	}
}


class Main {

public static void main(String[] args) {
	A a1 = new A();
	B b1 = new B();
	ThreadA t1 = new ThreadA(a1, b1);
	ThreadB t2 = new ThreadB(a1, b1);
	t1.start();
	t2.start();
	}
}
	
here the t1 will wait until t2 notify and t2 will wait until t1 notify;

to restrict  that we will use
wait(3000);

it will cause wait method wait until 3 sec.


=============================================================

Notify();

Notifies a thread that is waiting for a condition that the condition has occurred. 
This is a method of the Object class and must be called from within a synchronized method or block.


wai()
Waits for a condition to occur. 
This is a method of the Object class and must be called from within a synchronized method or block.


